Pseudo Code for Maintenance Request Tracker
1. Set up the project

Install necessary packages:
Node.js, Express, EJS (if used for templating), body-parser, and a database (MongoDB, SQLite, or similar).
Optionally use CSS for styling.
Create project structure:
/public: Static assets (CSS, JS).
/views: Templates (if using EJS).
/routes: Express route handlers.
server.js: Main server file.
2. Database Models

MaintenanceRequest:
{
  requestId: String,
  tenantName: String,
  propertyAddress: String,
  issueDescription: String,
  status: String, // e.g., "Pending", "In Progress", "Completed"
  submissionDate: Date,
  comments: [String] // Optional: comments by property managers.
}
3. Routes

Tenant Side

Route: /submit-request
Display a form where tenants fill out details of their maintenance request.
Fields: Name, Address, Issue Description.
Validate form inputs and submit the request to the database.
Route: /view-requests
Show tenants a list of their submitted requests with statuses.
Property Manager Side
3. Route: /admin/view-requests

Display all maintenance requests with filtering options (e.g., by status).
Route: /admin/update-request/:requestId
Allow property managers to update the status (Pending → In Progress → Completed).
Include a comment section to log actions taken.
4. User Interface

Tenant Views:

Submit form (Name, Address, Issue, Submit Button).
List of requests with status (e.g., "Request: Fix leaking pipe, Status: In Progress").
Admin Views:

List of all requests with options to filter and sort.
Buttons to update request status and add comments.
5. Backend Logic

Submit Maintenance Request
POST /submit-request:
Validate input fields.
Add the request to the database with a default status of "Pending".
Retrieve Tenant Requests
GET /view-requests:
Query the database for requests matching the tenant's name or address.
View All Requests (Admin)
GET /admin/view-requests:
Query the database for all requests.
Update Request Status
POST /admin/update-request/:requestId:
Update the status or comments for the specified request ID.

6. Example Flow

Tenant Submits a Request

Form submission → /submit-request → Save request to DB.
Admin Updates a Request

Admin logs in → View all requests at /admin/view-requests.
Select request → Update status → Save changes in DB.
Tenant Views Updates

/view-requests: Fetch tenant-specific requests and display status changes.
7. Key Features

Validation: Ensure all required fields are submitted.
Notifications: Optionally, notify tenants when a request is updated (e.g., via email or alerts).
Admin Filtering: Allow filtering requests by status, property, or date.
8. Pseudo Code Example

# 1. Tenant submits a maintenance request
POST /submit-request
  - Validate tenant inputs (name, address, issue)
  - Save request in DB with default status "Pending"

# 2. Admin views all requests
GET /admin/view-requests
  - Query database for all requests
  - Display in tabular format with filtering options

# 3. Admin updates a request
POST /admin/update-request/:requestId
  - Find request by ID
  - Update status (e.g., "Pending" -> "In Progress")
  - Optionally add admin comments
  - Save updates in DB

# 4. Tenant views their requests
GET /view-requests
  - Query database for tenant-specific requests
  - Display list of requests with current status